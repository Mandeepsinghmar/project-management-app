generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @map("profile_picture")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt

  createdProjects Project[]     @relation("CreatedBy")
  tasksAssignedTo TaskUser[]
  projectUsers    ProjectUser[]
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt

  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  tasks        Task[]
  projectUsers ProjectUser[]

  @@index([createdById])
}

model ProjectUser {
  projectId  String
  userId     String
  assignedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?    @map("due_date")
  projectId   String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt

  project   Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags      TaskTag[]
  assignees TaskUser[]

  @@index([projectId])
}

model TaskUser {
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  colorCode String?   @map("color_code")
  tasks     TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}
